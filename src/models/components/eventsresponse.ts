/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Event, Event$ } from "./event";
import * as z from "zod";

export type EventsResponse = {
    ok?: boolean | undefined;
    events?: Array<Event> | undefined;
};

/** @internal */
export namespace EventsResponse$ {
    export const inboundSchema: z.ZodType<EventsResponse, z.ZodTypeDef, unknown> = z
        .object({
            ok: z.boolean().optional(),
            events: z.array(Event$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ok === undefined ? null : { ok: v.ok }),
                ...(v.events === undefined ? null : { events: v.events }),
            };
        });

    export type Outbound = {
        ok?: boolean | undefined;
        events?: Array<Event$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EventsResponse> = z
        .object({
            ok: z.boolean().optional(),
            events: z.array(Event$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.ok === undefined ? null : { ok: v.ok }),
                ...(v.events === undefined ? null : { events: v.events }),
            };
        });
}
