/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Event, Event$inboundSchema, Event$Outbound, Event$outboundSchema } from "./event.js";
import * as z from "zod";

export type EventsResponse = {
    ok?: boolean | undefined;
    events?: Array<Event> | undefined;
};

/** @internal */
export const EventsResponse$inboundSchema: z.ZodType<EventsResponse, z.ZodTypeDef, unknown> =
    z.object({
        ok: z.boolean().optional(),
        events: z.array(Event$inboundSchema).optional(),
    });

/** @internal */
export type EventsResponse$Outbound = {
    ok?: boolean | undefined;
    events?: Array<Event$Outbound> | undefined;
};

/** @internal */
export const EventsResponse$outboundSchema: z.ZodType<
    EventsResponse$Outbound,
    z.ZodTypeDef,
    EventsResponse
> = z.object({
    ok: z.boolean().optional(),
    events: z.array(Event$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventsResponse$ {
    /** @deprecated use `EventsResponse$inboundSchema` instead. */
    export const inboundSchema = EventsResponse$inboundSchema;
    /** @deprecated use `EventsResponse$outboundSchema` instead. */
    export const outboundSchema = EventsResponse$outboundSchema;
    /** @deprecated use `EventsResponse$Outbound` instead. */
    export type Outbound = EventsResponse$Outbound;
}
