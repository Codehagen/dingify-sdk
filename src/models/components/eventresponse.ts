/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Event, Event$ } from "./event";
import * as z from "zod";

export type EventResponse = {
    ok?: boolean | undefined;
    message?: string | undefined;
    event?: Event | undefined;
};

/** @internal */
export namespace EventResponse$ {
    export const inboundSchema: z.ZodType<EventResponse, z.ZodTypeDef, unknown> = z
        .object({
            ok: z.boolean().optional(),
            message: z.string().optional(),
            event: Event$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.ok === undefined ? null : { ok: v.ok }),
                ...(v.message === undefined ? null : { message: v.message }),
                ...(v.event === undefined ? null : { event: v.event }),
            };
        });

    export type Outbound = {
        ok?: boolean | undefined;
        message?: string | undefined;
        event?: Event$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EventResponse> = z
        .object({
            ok: z.boolean().optional(),
            message: z.string().optional(),
            event: Event$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.ok === undefined ? null : { ok: v.ok }),
                ...(v.message === undefined ? null : { message: v.message }),
                ...(v.event === undefined ? null : { event: v.event }),
            };
        });
}
