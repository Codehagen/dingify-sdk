/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Event, Event$inboundSchema, Event$Outbound, Event$outboundSchema } from "./event.js";
import * as z from "zod";

export type EventResponse = {
    ok?: boolean | undefined;
    message?: string | undefined;
    event?: Event | undefined;
};

/** @internal */
export const EventResponse$inboundSchema: z.ZodType<EventResponse, z.ZodTypeDef, unknown> =
    z.object({
        ok: z.boolean().optional(),
        message: z.string().optional(),
        event: Event$inboundSchema.optional(),
    });

/** @internal */
export type EventResponse$Outbound = {
    ok?: boolean | undefined;
    message?: string | undefined;
    event?: Event$Outbound | undefined;
};

/** @internal */
export const EventResponse$outboundSchema: z.ZodType<
    EventResponse$Outbound,
    z.ZodTypeDef,
    EventResponse
> = z.object({
    ok: z.boolean().optional(),
    message: z.string().optional(),
    event: Event$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EventResponse$ {
    /** @deprecated use `EventResponse$inboundSchema` instead. */
    export const inboundSchema = EventResponse$inboundSchema;
    /** @deprecated use `EventResponse$outboundSchema` instead. */
    export const outboundSchema = EventResponse$outboundSchema;
    /** @deprecated use `EventResponse$Outbound` instead. */
    export type Outbound = EventResponse$Outbound;
}
