/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Event = {
    /**
     * The name of the event.
     */
    name: string;
    /**
     * The channel name associated with the event.
     */
    channel: string;
    /**
     * The specific event being described.
     */
    event: string;
    /**
     * An optional icon for visual representation of the event.
     */
    icon?: string | undefined;
    /**
     * Flag indicating whether users should be notified about the event.
     */
    notify: boolean;
    /**
     * Tags providing additional context or categorization for the event.
     */
    tags?: Record<string, string> | undefined;
};

/** @internal */
export namespace Event$ {
    export type Inbound = {
        name: string;
        channel: string;
        event: string;
        icon?: string | undefined;
        notify: boolean;
        tags?: Record<string, string> | undefined;
    };

    export const inboundSchema: z.ZodType<Event, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
            channel: z.string(),
            event: z.string(),
            icon: z.string().optional(),
            notify: z.boolean(),
            tags: z.record(z.string()).optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                channel: v.channel,
                event: v.event,
                ...(v.icon === undefined ? null : { icon: v.icon }),
                notify: v.notify,
                ...(v.tags === undefined ? null : { tags: v.tags }),
            };
        });

    export type Outbound = {
        name: string;
        channel: string;
        event: string;
        icon?: string | undefined;
        notify: boolean;
        tags?: Record<string, string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Event> = z
        .object({
            name: z.string(),
            channel: z.string(),
            event: z.string(),
            icon: z.string().optional(),
            notify: z.boolean(),
            tags: z.record(z.string()).optional(),
        })
        .transform((v) => {
            return {
                name: v.name,
                channel: v.channel,
                event: v.event,
                ...(v.icon === undefined ? null : { icon: v.icon }),
                notify: v.notify,
                ...(v.tags === undefined ? null : { tags: v.tags }),
            };
        });
}
