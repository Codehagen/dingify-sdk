/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type Event = {
    /**
     * The ID of the event.
     */
    id: string;
    /**
     * The name of the event.
     */
    name: string;
    /**
     * The ID of the channel associated with the event.
     */
    channelId: string;
    /**
     * The ID of the user associated with the event.
     */
    userId: string;
    /**
     * An optional icon for visual representation of the event.
     */
    icon: string;
    /**
     * Flag indicating whether users should be notified about the event.
     */
    notify: boolean;
    /**
     * Tags providing additional context or categorization for the event.
     */
    tags?: { [k: string]: string } | undefined;
    /**
     * The timestamp when the event was created.
     */
    createdAt: Date;
};

/** @internal */
export namespace Event$ {
    export const inboundSchema: z.ZodType<Event, z.ZodTypeDef, unknown> = z.object({
        id: z.string(),
        name: z.string(),
        channelId: z.string(),
        userId: z.string(),
        icon: z.string(),
        notify: z.boolean(),
        tags: z.record(z.string()).optional(),
        createdAt: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
    });

    export type Outbound = {
        id: string;
        name: string;
        channelId: string;
        userId: string;
        icon: string;
        notify: boolean;
        tags?: { [k: string]: string } | undefined;
        createdAt: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Event> = z.object({
        id: z.string(),
        name: z.string(),
        channelId: z.string(),
        userId: z.string(),
        icon: z.string(),
        notify: z.boolean(),
        tags: z.record(z.string()).optional(),
        createdAt: z.date().transform((v) => v.toISOString()),
    });
}
