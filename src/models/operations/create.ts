/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type CreateResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * Event logged successfully.
     */
    event?: components.Event | undefined;
};

/** @internal */
export namespace CreateResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Event?: components.Event$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreateResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Event: components.Event$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Event === undefined ? null : { event: v.Event }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Event?: components.Event$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            event: components.Event$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.event === undefined ? null : { Event: v.event }),
            };
        });
}
