/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * API key is required
 */
export type UnauthorizedErrorData = {
    ok: boolean;
    message: string;
};

/**
 * API key is required
 */
export class UnauthorizedError extends Error {
    ok: boolean;

    /** The original data that was passed to this error instance. */
    data$: UnauthorizedErrorData;

    constructor(err: UnauthorizedErrorData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        this.ok = err.ok;

        this.name = "UnauthorizedError";
    }
}

/** @internal */
export const UnauthorizedError$inboundSchema: z.ZodType<UnauthorizedError, z.ZodTypeDef, unknown> =
    z
        .object({
            ok: z.boolean(),
            message: z.string(),
        })
        .transform((v) => {
            return new UnauthorizedError(v);
        });

/** @internal */
export type UnauthorizedError$Outbound = {
    ok: boolean;
    message: string;
};

/** @internal */
export const UnauthorizedError$outboundSchema: z.ZodType<
    UnauthorizedError$Outbound,
    z.ZodTypeDef,
    UnauthorizedError
> = z
    .instanceof(UnauthorizedError)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            ok: z.boolean(),
            message: z.string(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnauthorizedError$ {
    /** @deprecated use `UnauthorizedError$inboundSchema` instead. */
    export const inboundSchema = UnauthorizedError$inboundSchema;
    /** @deprecated use `UnauthorizedError$outboundSchema` instead. */
    export const outboundSchema = UnauthorizedError$outboundSchema;
    /** @deprecated use `UnauthorizedError$Outbound` instead. */
    export type Outbound = UnauthorizedError$Outbound;
}
